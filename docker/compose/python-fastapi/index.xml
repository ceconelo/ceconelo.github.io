<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python-FastAPI on Sonath - Wiki</title>
    <link>https://sonath.dev.br/docker/compose/python-fastapi/index.html</link>
    <description>Recent content in Python-FastAPI on Sonath - Wiki</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language><atom:link href="https://sonath.dev.br/docker/compose/python-fastapi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dev/Zsh</title>
      <link>https://sonath.dev.br/docker/compose/python-fastapi/dev-zsh-.pk10.zsh/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://sonath.dev.br/docker/compose/python-fastapi/dev-zsh-.pk10.zsh/index.html</guid>
      <description>.pk10.zsh # Generated by Powerlevel10k configuration wizard on 2023-02-20 at 20:53 UTC. # Based on romkatv/powerlevel10k/config/p10k-lean.zsh, checksum 01951. # Wizard options: nerdfont-complete + powerline, small icons, unicode, lean, 2 lines, # disconnected, no frame, sparse, few icons, concise, instant_prompt=off. # Type `p10k configure` to generate another config. # # Config for Powerlevel10k with lean prompt style. Type `p10k configure` to generate # your own config based on it. # # Tip: Looking for a nice color?</description>
    </item>
    <item>
      <title>Dev/dockerfile</title>
      <link>https://sonath.dev.br/docker/compose/python-fastapi/dev-dockerfile/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://sonath.dev.br/docker/compose/python-fastapi/dev-dockerfile/index.html</guid>
      <description>Dockerfile FROM python:3.10.6-slim ENV TZ=&amp;#34;America/Sao_Paulo&amp;#34; ENV PYTHONUNBUFFERED 1 ENV PYTHONDONTWRITEBYTECODE 1 RUN apt update &amp;amp;&amp;amp; apt install -y --no-install-recommends \ default-jre \ git \ zsh \ curl \ wget \ fonts-powerline \ nano COPY ./.docker/dev/start /start RUN sed -i &amp;#39;s/\r$//g&amp;#39; /start RUN chmod +x /start RUN useradd -ms /bin/bash python USER python ENV PYTHONPATH=${PYTHONPATH}/home/python/app/src ENV PATH=${PATH}:/home/python/.local/bin RUN sh -c &amp;#34;$(wget -O- https://github.com/deluan/zsh-in-docker/releases/download/v1.1.5/zsh-in-docker.sh)&amp;#34; -- \ -t https://github.com/romkatv/powerlevel10k.git \ -p git \ -p https://github.</description>
    </item>
    <item>
      <title>Dev/start</title>
      <link>https://sonath.dev.br/docker/compose/python-fastapi/dev-start/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://sonath.dev.br/docker/compose/python-fastapi/dev-start/index.html</guid>
      <description>start #!/bin/bash # if any of the commands in your code fails for any reason, the entire script fails set -o errexit # fail exit if one of your pipe command fails set -o pipefail # exits if any of your variables is not set set -o nounset #python app.py #tail -f /dev/null uvicorn main:app --reload --reload-dir src --host 0.0.0.0 --workers 1 exec &amp;#34;$@&amp;#34;</description>
    </item>
    <item>
      <title>Dev/wait-for-it</title>
      <link>https://sonath.dev.br/docker/compose/python-fastapi/dev-wait-for-it/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://sonath.dev.br/docker/compose/python-fastapi/dev-wait-for-it/index.html</guid>
      <description>wait-for-it #!/usr/bin/env bash # Use this script to test if a given TCP host/port are available WAITFORIT_cmdname=${0##*/} echoerr() { if [[ $WAITFORIT_QUIET -ne 1 ]]; then echo &amp;#34;$@&amp;#34; 1&amp;gt;&amp;amp;2; fi } usage() { cat &amp;lt;&amp;lt; USAGE &amp;gt;&amp;amp;2 Usage: $WAITFORIT_cmdname host:port [-s] [-t timeout] [-- command args] -h HOST | --host=HOST Host or IP under test -p PORT | --port=PORT TCP port under test Alternatively, you specify the host and port as host:port -s | --strict Only execute subcommand if the test succeeds -q | --quiet Don&amp;#39;t output any status messages -t TIMEOUT | --timeout=TIMEOUT Timeout in seconds, zero for no timeout -- COMMAND ARGS Execute command with args after the test finishes USAGE exit 1 } wait_for() { if [[ $WAITFORIT_TIMEOUT -gt 0 ]]; then echoerr &amp;#34;$WAITFORIT_cmdname: waiting $WAITFORIT_TIMEOUT seconds for $WAITFORIT_HOST:$WAITFORIT_PORT&amp;#34; else echoerr &amp;#34;$WAITFORIT_cmdname: waiting for $WAITFORIT_HOST:$WAITFORIT_PORT without a timeout&amp;#34; fi WAITFORIT_start_ts=$(date +%s) while : do if [[ $WAITFORIT_ISBUSY -eq 1 ]]; then nc -z $WAITFORIT_HOST $WAITFORIT_PORT WAITFORIT_result=$?</description>
    </item>
  </channel>
</rss>